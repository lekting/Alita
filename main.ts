import colors from 'colors';
import mongoWorker from './mongoWorker';
import instagram from './instagram';

const MongoClient 	 = require('mongodb').MongoClient;

//let bot = require('./bot');
let mongoClient: Promise<any> = connectDB();

let args: Array<string> = process.argv.slice(2);

let login: string    = args[0] || 'test',
    password: string = args[1] || 'test';

mongoClient.then(async (client: any) => {

    let mc: mongoWorker = new mongoWorker('films', client);
    console.log(colors.bold(colors.green('MongoDB –∑–∞–≥—Ä—É–∂–µ–Ω')));

    let inst: instagram = new instagram(login, password, mc);
    await inst.init();

    console.log(colors.bold(colors.green('Instagram –∑–∞–≥—Ä—É–∂–µ–Ω')));

    //bot = new bot(instagram);

    /* let max = await inst.follow();
    console.log(colors.bold(colors.green(`–ü–æ–¥–ø–∏—Å–∫–∏ —Å–¥–µ–ª–∞–Ω—ã [${max}]`))); */

    let max = await inst.unfollow(10);
    console.log(colors.bold(colors.green(`–û—Ç–ø–∏—Å–∫–∏ —Å–¥–µ–ª–∞–Ω—ã [${max}]`)));
    

    /* let desc: string = '–°–º–æ—Ç—Ä–∏—Ç–µ —ç—Ç–æ –∞–Ω–∏–º–µ –≤ –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–µ, —Å—Å—ã–ª–∫–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã!';
    //let tags:string = '\n\n\n#—Ñ–∏–ª—å–º—ã #—Å–º–æ—Ç—Ä–µ—Ç—å—Ñ–∏–ª—å–º #—Å–º–µ—à–Ω—ã–µ–º–æ–º–µ–Ω—Ç—ã #films';
    let tags: string = '\n\n\n#–∞–Ω–∏–º–µ #—Å–º–æ—Ç—Ä–µ—Ç—å–∞–Ω–∏–º–µ #—Å–º–µ—à–Ω—ã–µ–º–æ–º–µ–Ω—Ç—ã #anime';

    let name: string = '–ê–Ω–∏–º–µ: –ì—Ä–∞–±–∏—Ç–µ–ª—å';
    let f_name: string = '–ì—Ä–∞–±–∏—Ç–µ–ª—å';

    await inst.uploadVideo(`./videos/${f_name}.mp4`, `${name} üé¨\n\n${desc}${tags}`, `./videos/previews/${f_name}.jpg`);

    console.log(colors.bold(colors.green('–í–∏–¥–µ–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'))); */

}).catch(error => {
    /* bot.sendMessage({
        chat_id: config.telegramAdmins[0],
        text: 'MongoDB –ø–ª—é–Ω—É–ª –≤ –µ–±–ª–æ –æ—à–∏–±–∫—É, —á–µ–∫–Ω–∏'
    }); */
    console.log(error);
});

function connectDB(): Promise<any> {
    return new Promise((resolve, reject) => {
        MongoClient.connect('mongodb://127.0.0.1:27017', { connectTimeoutMS: 5000, useUnifiedTopology: true, useNewUrlParser: true }, (err: any, client: any) => {

            if(err) {
                reject(err);
                return;
            }
            
            resolve(client);
        });
    });
}